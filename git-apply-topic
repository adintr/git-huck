#!/bin/bash

is_continue_mode=0
is_abort_mode=0
master_branchs=''

while [ -n "$1" ]
do
   case "$1" in
   --continue) is_continue_mode=1 ;;
   --abort) is_abort_mode=1 ;;
   -*) echo unknown option $1 >&2
       exit 1;;
   *) master_branchs="$master_branchs $1" ;;
   esac
   shift
done

if [ $is_continue_mode -ne 0 ]
then
   git apply-topic-continue
   exit $?
fi

if [ $is_abort_mode -ne 0 ]
then
   echo 'abort option is not support now, try to update for new version.'
   exit 0
fi

if [ -z "$master_branchs" ]
then
   master_branchs=`git config huck.masters`
fi

if [ -z "$master_branchs" ]
then
   echo 'no master branchs to be apply.' >&2
   exit 1
fi

commit_filtkey=`git config huck.keyword`
current_branch=`git branch --no-color 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
current_branch_askey=`echo $current_branch | tr -d "_"`
project_dir=`git rev-parse --show-toplevel`
branch_begin=`git config huck.lastapply.$current_branch_askey`

if [ -z "$branch_begin" ]
then
    branch_begin=`cat "$project_dir/.git/logs/refs/heads/$current_branch" | grep 0000000000000000000000000000000000000000 | awk '{print $2}'`
fi


if [ -z "$branch_begin" ]
then
    echo "reflog is miss or too old, can't find the beginning of branch $current_branch" >&2
    exit 2
fi

merge_commits=`git rev-list --grep "$commit_filtkey" --reverse $branch_begin..`

if [ -z "$merge_commits" ]
then
    echo "no commit need to apply to other branchs."
    exit 0
fi

exec 3>$project_dir/.git/apply_topic_commits
echo $current_branch >&3

for branch in $master_branchs
do
    for commit in $merge_commits
    do
    echo $branch $commit >&3
    done
done

exec 3>&-

git apply-topic-continue
